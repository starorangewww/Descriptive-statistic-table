library(shiny)
library(readr)
library(gridExtra)
library(ggplot2)
library(PupillometryR)
library(shinythemes)
library(shinyWidgets)
library(randomForest)
#library(glmnet)
library(kernelshap)
library(shapviz)
library(ranger)
# 定義 UI 部分
ui <- fluidPage(
  theme=shinytheme("slate"),
  titlePanel("CSV 檔案敘述統計與圖表"),
  
  sidebarLayout(
    sidebarPanel(
      fileInput("file", "選擇 CSV 檔案", accept = ".csv"),
      selectizeInput("columns_res", "選擇要顯示作為依變數的列(如沒有就空著)", choices = NULL, multiple = TRUE),
      selectizeInput("columns_cat", "選擇要顯示的類別變數", choices = NULL, multiple = TRUE),
      selectizeInput("columns_con", "選擇要顯示的連續變數", choices = NULL, multiple = TRUE),
      #checkboxGroupInput("columns_res", "請選擇反應變數 (Response)", choices = NULL,inline = F),
      #checkboxGroupInput("columns_cat", "請選擇類別變數 (Categorical variables)", choices = NULL,inline = F),
      #checkboxGroupInput("columns_con", "請選擇連續變數 (Continuous variables)", choices = NULL,inline = F),
      br(),
      #
      checkboxGroupInput("columns_res_Type", "反應變數類型", choices = list("類別變數"=1,"連續變數"=2),inline = F),
      br(),
      c("反應變數為類別變數"),
      radioButtons("testing.cont", label = "假設檢定(類別變數vs連續變數)",
                   choices = list("Mann-Whitney U test" = 1, "Two-sample t test" = 2,"Kruskal-Wallis test"=3), selected = 1),
      radioButtons("testing.cate", label = "假設檢定(類別變數vs類別變數)",
                   choices = list("Chi-square test" = 1, "Fisher's exact test" = 2), selected = 1),
      
      c("反應變數為連續變數"),
      radioButtons("testing.cont_1", label = "假設檢定(連續變數vs類別變數)",
                   choices = list("Kruskal-Wallis test"=1), selected = 1),
      radioButtons("testing.cate_1", label = "假設檢定(連續變數vs連續變數)",
                   choices = list("Student's t test" = 1), selected = 1),
      br(),
      actionButton("show_summary", "顯示敘述統計"),
      progressBar(id = "pb4", value = 0,display_pct = T),
      br(),
      downloadButton("download_summary", "下載敘述統計結果")
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("遺失值個數(比例)/反應變數個數(比例)", verbatimTextOutput("abundant.V") ,verbatimTextOutput("Missing.V"),verbatimTextOutput("response.V"),verbatimTextOutput("Descriptive")),
        tabPanel("敘述統計", verbatimTextOutput("summary")),
        #tabPanel("變數重要性",plotOutput("RF"),plotOutput("Shap_plot")),
        tabPanel("變數視覺化",plotOutput("Cate_plot"),plotOutput("Con_plot"))
      )
    )
  )
)

# 定義 server 部分
server <- function(input, output, session) {
  # 定義一個 reactiveVal 來保存結果
  result_summary1 <- reactiveVal(NULL)
  result_MissingV <- reactiveVal(NULL)
  result_classv <- reactiveVal(NULL)
  data <- reactive({
    req(input$file)
    read_csv(input$file$datapath)
  })
  
  observe({
    if (!is.null(data())) {
      updateSelectizeInput(session, "columns_res", choices = colnames(data()))
      updateSelectizeInput(session, "columns_cat", choices = colnames(data()))
      updateSelectizeInput(session, "columns_con", choices = colnames(data()))
      #
      #updateSelectizeInput(session, "columns_res", choices = colnames(data()))
      #
      #updateCheckboxGroupInput(session, "columns_res", choices = colnames(data()))
      #updateCheckboxGroupInput(session, "columns_cat", choices = colnames(data()))
      #updateCheckboxGroupInput(session, "columns_con", choices = colnames(data()))
    }
  })
  #observeEvent(input$columns_res, {
  #  if (!is.null(data())){
      # 更新連續變數的選項，排除已選擇的類別變數和依變數變數
      #updateSelectizeInput(session, "columns_cat", choices = setdiff(colnames(data()), c(input$columns_res)))
  #    updateCheckboxGroupInput(session, "columns_cat", choices = setdiff(colnames(data()), c(input$columns_res)))
  #  }
  #})
  
  #observeEvent(input$columns_res, {
  #  if (!is.null(data())){
  #    # 更新依變數變數的選項，排除已選擇的類別變數和連續變數
  #    updateSelectizeInput(session, "columns_con", choices = setdiff(colnames(data()), c(input$columns_res)))
      #updateCheckboxGroupInput(session, "columns_con", choices = setdiff(colnames(data()), c(input$columns_res)))
  #  }
  #})
  
  #click_status <- reactiveValues(clicked = FALSE)
  
  observeEvent(input$show_summary, {
    #req(input$columns)
    maxi <- 50
    for (i in 1:maxi) {
      updateProgressBar(session = session, id = "pb4", value = (i/maxi)*100)
      Sys.sleep(0.1)
    }
    #
    output$abundant.V<-renderPrint({
      response.t<-input$columns_res
      Con.1<-input$columns_con
      Cate.1<-input$columns_cat
      #Diversity
      DV<-1-sum((1/dim(data()[,c(response.t,Con.1,Cate.1)])[2])^2)
      #1-Missing
      CC<-mean(1-colMeans(is.na(data()[,c(response.t,Con.1,Cate.1)])))
      #
      Abundant<-DV*CC
      print(Abundant)
    })
      
    output$Missing.V<-renderPrint({
      response.t<-input$columns_res
      Con.1<-input$columns_con
      Cate.1<-input$columns_cat
      M.1<-rbind(round(colMeans(is.na(data()[,c(response.t,Con.1,Cate.1)]))*100,2),colMeans(is.na(data()[,c(response.t,Con.1,Cate.1)]))*dim(data())[1])
      rownames(M.1)<-c("比例(%)","個數")
      print(M.1)
      result_MissingV(M.1)
    })
    output$response.V<-renderPrint({
      if(input$columns_res_Type==1){
      D.t<-as.data.frame(data())
      response.t<-input$columns_res
      res.1<-table(D.t[,which(names(D.t)==response.t)])
      res.2<-round(prop.table(res.1)*100,2)
      res.M<-rbind(res.2,res.1)
      res.M<-cbind(res.M,c(100,sum(res.1)))
      rownames(res.M)<-c("比例(%)","個數")
      colnames(res.M)<-c(paste0(response.t,".",names(res.1)),"總和")
      print(res.M)
      result_classv(res.M)
      }else{
        D.t<-as.data.frame(data())
        response.t<-input$columns_res
        #res.M<-summary(D.t[,which(names(D.t)==response.t)])
        Mean.t<-round(mean(D.t[,which(names(D.t)==response.t)],na.rm = T),2)
        SD.t<-round(sqrt(var(D.t[,which(names(D.t)==response.t)],na.rm = T)),2)
        med.t<-median(D.t[,which(names(D.t)==response.t)],na.rm = T)
        sample.size<-length(D.t[,which(names(D.t)==response.t)])
        max.t<-max(D.t[,which(names(D.t)==response.t)],na.rm = T)
        min.t<-min(D.t[,which(names(D.t)==response.t)],na.rm = T)
        res.M<-matrix(c(min.t,med.t,max.t,Mean.t,SD.t,sample.size),nrow=1)
        colnames(res.M)<-c("Min","Median","Max","Mean","SD","Sample size")
        #
        result_classv(res.M)
        print(res.M)
      }
    })
    #
    output$summary <- renderPrint({
      if(is.null(input$columns_res)){
        result <- lapply(c(input$columns_cat,input$columns_con), function(col){
          summary(data()[[col]])
        })
        do.call("rbind", result)
      }else{
        D.1<-as.data.frame(data())
        response.1<-input$columns_res
        if(length(response.1)>1){
          
          print("Please chosoe one")
          
          }else{
            if(input$columns_res_Type==1){
              #if response is categorical
              Class.1<-names(table(data()[[response.1]]))
              Con.1<-input$columns_con
              Cate.1<-input$columns_cat
              if(length(Class.1)!=2){
                #class > 2
                #Continous
                Descriptive.Cont<-c()
                if(length(Con.1)==0){Descriptive.Cont<-Descriptive.Cont}else{
                  for(k.1 in Con.1){
                    Descriptive.con<-c()
                    for(i in 1:length(Class.1)){
                      result.2.Mean <- mean(D.1[which(D.1[,response.1]==Class.1[i]),which(names(D.1)==k.1)],na.rm = T)
                      result.2.SD <- sqrt(var(D.1[which(D.1[,response.1]==Class.1[i]),which(names(D.1)==k.1)],na.rm = T))
                      result.2.Med <- median(D.1[which(D.1[,response.1]==Class.1[i]),which(names(D.1)==k.1)],na.rm = T)
                      Descriptive.con<-c(Descriptive.con,paste0(round(result.2.Mean,2),"±",round(result.2.SD,2),"(",result.2.Med,")"))
                    }
                    # testing
                    if(input$testing.cont==3){
                      MW<-kruskal.test(x=D.1[,which(names(D.1)==response.1)],g=D.1[,which(names(D.1)==k.1)])
                      #D.1[which(D.1[,response.1]==Class.1[1]),which(names(D.1)==k.1)],D.1[which(D.1[,response.1]==Class.1[2]),which(names(D.1)==k.1)],exact = F)
                      
                      Descriptive.con<-c(Descriptive.con,round(MW$p.value,2))
                    }
                    Descriptive.Cont<-rbind(Descriptive.Cont,Descriptive.con)
                  }
                  rownames(Descriptive.Cont)<-Con.1
                }
                #Cate
                Descriptive.Cate<-c()
                if(length(Cate.1)==0){Descriptive.Cate<-Descriptive.Cate}else{
                  for(k.2 in Cate.1){
                    VV<-paste0(k.2,".",names(table(D.1[which(is.na(D.1[,k.2])==F),which(names(D.1)==k.2)]))) 
                    result.2.table <- table(D.1[which(is.na(D.1[,k.2])==F),which(names(D.1)==k.2)],D.1[which(is.na(D.1[,k.2])==F),which(names(D.1)==response.1)])
                    result.2.table.row<-prop.table(result.2.table, margin = 1)
                    result.3<-matrix(paste0(result.2.table,"(",round(result.2.table.row*100,2),"%",")"),nrow = dim(result.2.table)[1],ncol = dim(result.2.table)[2])
                    testing.col<-matrix(NA,ncol=1,nrow=dim(result.2.table)[1])
                    # testing
                    if(input$testing.cate==1){
                      Chi.Val<-chisq.test(result.2.table)
                      testing.col[1,]<-round(Chi.Val$p.value,2)
                    }else{
                      Fisher.exact<-fisher.test(result.2.table)
                      testing.col[1,]<-round(Fisher.exact$p.value,2)
                    }
                    result.3<-cbind(result.3,testing.col)
                    rownames(result.3)<-VV
                    Descriptive.Cate<-rbind(Descriptive.Cate,result.3)
                  }
                }
                result.summary<-rbind(Descriptive.Cont,Descriptive.Cate)
                RR<-paste0(response.1,".",names(table(D.1[,which(names(D.1)==response.1)]))) 
                colnames(result.summary)<-c(RR,"P value")
                
                result_summary1(result.summary)
                print(result.summary)
                #
              }else{
                #Continous
                Descriptive.Cont<-c()
                if(length(Con.1)==0){Descriptive.Cont<-Descriptive.Cont}else{
                  for(k.1 in Con.1){
                    Descriptive.con<-c()
                    for(i in 1:length(Class.1)){
                      result.2.Mean <- mean(D.1[which(D.1[,response.1]==Class.1[i]),which(names(D.1)==k.1)],na.rm = T)
                      result.2.SD <- sqrt(var(D.1[which(D.1[,response.1]==Class.1[i]),which(names(D.1)==k.1)],na.rm = T))
                      result.2.Med <- median(D.1[which(D.1[,response.1]==Class.1[i]),which(names(D.1)==k.1)],na.rm = T)
                      Descriptive.con<-c(Descriptive.con,paste0(round(result.2.Mean,2),"±",round(result.2.SD,2),"(",result.2.Med,")"))
                    }
                    # testing
                    if(input$testing.cont==1){
                      MW<-wilcox.test(D.1[which(D.1[,response.1]==Class.1[1]),which(names(D.1)==k.1)],
                                      D.1[which(D.1[,response.1]==Class.1[2]),which(names(D.1)==k.1)],exact = F)
                      Descriptive.con<-c(Descriptive.con,round(MW$p.value,2))
                    }else{
                      if(input$testing.cont==2){
                        Two.t<-t.test(D.1[which(D.1[,response.1]==Class.1[1]),which(names(D.1)==k.1)],D.1[which(D.1[,response.1]==Class.1[2]),which(names(D.1)==k.1)])
                        Descriptive.con<-c(Descriptive.con,round(Two.t$p.value,2))
                      }
                    }
                    #Descriptive.con<-c(Descriptive.con,round(MW$p.value,2))
                    Descriptive.Cont<-rbind(Descriptive.Cont,Descriptive.con)
                  }
                  rownames(Descriptive.Cont)<-Con.1
                }
                #Cate
                Descriptive.Cate<-c()
                if(length(Cate.1)==0){Descriptive.Cate<-Descriptive.Cate}else{
                  for(k.2 in Cate.1){
                    VV<-paste0(k.2,".",names(table(D.1[which(is.na(D.1[,k.2])==F),which(names(D.1)==k.2)]))) 
                    result.2.table <- table(D.1[which(is.na(D.1[,k.2])==F),which(names(D.1)==k.2)],D.1[which(is.na(D.1[,k.2])==F),which(names(D.1)==response.1)])
                    result.2.table.row<-prop.table(result.2.table, margin = 1)
                    result.3<-matrix(paste0(result.2.table,"(",round(result.2.table.row*100,2),"%",")"),nrow = dim(result.2.table)[1],ncol = dim(result.2.table)[2])
                    testing.col<-matrix(NA,ncol=1,nrow=dim(result.2.table)[1])
                    # testing
                    if(input$testing.cate==1){
                      Chi.Val<-chisq.test(result.2.table)
                      testing.col[1,]<-round(Chi.Val$p.value,2)
                    }else{
                      Fisher.exact<-fisher.test(result.2.table)
                      testing.col[1,]<-round(Fisher.exact$p.value,2)
                    }
                    result.3<-cbind(result.3,testing.col)
                    rownames(result.3)<-VV
                    Descriptive.Cate<-rbind(Descriptive.Cate,result.3)
                  }
                }
                result.summary<-rbind(Descriptive.Cont,Descriptive.Cate)
                RR<-paste0(response.1,".",names(table(D.1[,which(names(D.1)==response.1)]))) 
                colnames(result.summary)<-c(RR,"P value")
                
                result_summary1(result.summary)
                print(result.summary)
              }
            }else{
              #if response is continuous
              Con.1<-input$columns_con
              Cate.1<-input$columns_cat
              #Continous
              Descriptive.Cont<-c()
              if(length(Con.1)==0){Descriptive.Cont<-Descriptive.Cont}else{
                for(k.1 in Con.1){
                  #Descriptive.con<-c()
                  W.1<-cor.test(D.1[,which(names(D.1)==response.1)],D.1[,which(names(D.1)==k.1)])
                  W.1.1<-paste(round(W.1$estimate,2),"±",round(abs(W.1$estimate/W.1$statistic),2))
                  Descriptive.con<-c(W.1.1,round(W.1$p.value,2))
                  #
                  Descriptive.Cont<-rbind(Descriptive.Cont,Descriptive.con)
                }
                rownames(Descriptive.Cont)<-Con.1
              }
             #categorical 
            Descriptive.Cate<-c()
            if(length(Cate.1)==0){Descriptive.Cate<-Descriptive.Cate}else{
              for(k.2 in Cate.1){
                VV<-paste0(k.2,".",names(table(D.1[which(is.na(D.1[,k.2])==F),which(names(D.1)==k.2)]))) 
                Descriptive.cate1<-c()
                Descriptive.catep<-c()
                Cate1<-names(table(D.1[,which(names(D.1)==k.2)]))
                for(i in 1:length(Cate1)){
                  result.2.Mean <- mean(D.1[which(D.1[,k.2]==Cate1[i]),which(names(D.1)==response.1)],na.rm = T)
                  result.2.SD <- sqrt(var(D.1[which(D.1[,k.2]==Cate1[i]),which(names(D.1)==response.1)],na.rm = T))
                  result.2.Med <- median(D.1[which(D.1[,k.2]==Cate1[i]),which(names(D.1)==response.1)],na.rm = T)
                  Descriptive.cate1<-c(Descriptive.cate1,paste0(round(result.2.Mean,2),"±",round(result.2.SD,2),"(",result.2.Med,")"))
                  #testing
                  }
                MW<-kruskal.test(D.1[,which(names(D.1)==response.1)],D.1[,which(names(D.1)==k.2)])
                Descriptive.catep<-c(Descriptive.catep,c(round(MW$p.value,2),rep(NA,length(table(D.1[,which(names(D.1)==k.2)]))-1)))
                result.3<-cbind(Descriptive.cate1,Descriptive.catep)
                rownames(result.3)<-VV
                #
                Descriptive.Cate<-rbind(Descriptive.Cate,result.3)
              }
            }
            result.summary<-rbind(Descriptive.Cont,Descriptive.Cate)
            colnames(result.summary)<-c(response.1,"P value")
            #
            result_summary1(result.summary)
            print(result.summary)
            }
          
        }
      }
   
    })
    #Important variables: RF
    
    
    
    #Descriptive
    output$Descriptive<-renderPrint({
      First.D<-result_classv()
      Second.D<-result_MissingV()
      Thirs.D<-result_summary1()
      if(input$columns_res_Type==1){
    significant<-as.numeric(input$signif)
     Begin<-c("According to the results of descriptive statistics,")  
     First.stagement<-paste(c("this data is totally"),First.D[2,dim(First.D)[2]],", and the number of class has",dim(First.D)[2]-1,".")
     Sec.stagement<-paste0("The number of ", colnames(First.D)[1:(dim(First.D)[2]-1)]," is ",First.D[2,1:(dim(First.D)[2]-1)],", and the proportion is ",First.D[1,1:(dim(First.D)[2]-1)],"%.")
     #
     Cont.test<-if(input$testing.cont==1){"Mann-Whitney test"}else{if(input$testing.cont==2){"Two sample t test"}else{"Kruskal-Wallis test"}}
     Cate.test<-if(input$testing.cate==1){"Chi-square test"}else{"Fisher's exact test"}
     #
     
     Con.1<-input$columns_con
     Cate.1<-input$columns_cat
     
     Var.sig<-which(Thirs.D[,dim(Thirs.D)[2]]<significant)
     #is.na(Thirs.D[,dim(Thirs.D)[2]])==F
     fourth.stagement<-if(length(Var.sig)==0){"These variables are insignificant."}else{
       #Thirs.D.cont<-Thirs.D[c(1:length(Con.1)),]
       #Thirs.D.cate<-Thirs.D[-c(1:length(Con.1)),]
       #Thirs.D.cont.sig<-Thirs.D.cont[which(Thirs.D.cont[,dim(Thirs.D.cont)[2]]<0.22),]
       #Thirs.D.cate.sig<-Thirs.D.cate[which(Thirs.D.cate[,dim(Thirs.D.cate)[2]]<0.22),]
       #c(rownames(Thirs.D.cont.sig),rownames(Thirs.D.cate.sig))
       Var.2<-unique(sub("\\..*", "",rownames(Thirs.D)[Var.sig]))
       #which(c(Con.1)%in%Var.2)
       #Var.3<-c()
       #if(is.null(Con.1)==F&is.null(Cate.1)==F){
       #for(j in 1:length(Var.2)){
      #   if(length(which(Var.2[j]==Con.1))==1){Var.3<-c(Var.3,"cont")}else{Var.3<-c(Var.3,"cate")}
      # }}
       #
       paste("The number of significant variable is ",length(Var.2),", it is including about", paste(Var.2,collapse=", "),".")
       }
      Fifth.stagement<-c("The results presented above are derived from univariate analysis. This means that the significant relationship is organized solely by the response variable and a single independent variable at a time.")
      #We can provide insights into the importance of these variables with respect to the response variable by utilizing random forest methodology.
      #cat(Begin)
      #cat("\n")
      #cat(First.stagement)
      #cat("\n")
      #cat(Sec.stagement)
      #cat("\n")
      cat(Begin,First.stagement,"\n",
         Sec.stagement,"\n",fourth.stagement,"\n",Fifth.stagement)
      }else{
        significant<-as.numeric(input$signif)
        Begin<-c("According to the results of descriptive statistics,")  
        First.stagement<-paste(c("this data is totally"),First.D[1,dim(First.D)[2]],".")
        Cont.test<-"t test"
        Cate.test<-"Kruskal-Wallis test"
        #
        Con.1<-input$columns_con
        Cate.1<-input$columns_cat
        
        Var.sig<-which(Thirs.D[,dim(Thirs.D)[2]]<significant)
        fourth.stagement<-if(length(Var.sig)==0){"These variables are insignificant."}else{
          rownames(Thirs.D)[Var.sig]
          }
        cat(Begin,First.stagement,"\n",
            fourth.stagement)
      }
    })
    
    #Categorical variable: Bar plot
    output$Cate_plot <- renderPlot({
      if(input$columns_res_Type==1){
      D.1<-as.data.frame(data())
      response.1<-input$columns_res
      if(length(response.1)==0){"No"}else{
        Cate.1<-input$columns_cat
        if(length(response.1)>1){print("Please choose one")}else{
          # 使用 ggplot2: barplot
          P <- lapply(Cate.1, function(CAT){
            D.plty.c <- data.frame(Count=c(t(table(D.1[,names(D.1)==CAT],D.1[,names(D.1)==response.1]))),
                                   X=rep(names(table(D.1[,names(D.1)==response.1])),length(names(table(D.1[,names(D.1)==CAT])))),
                                   group.1=rep(names(table(D.1[,names(D.1)==CAT])),each=length(names(table(D.1[,names(D.1)==response.1])))))
            #Plot
            ggplot(data=D.plty.c, aes(x=X, y=Count, fill=group.1)) +
              geom_bar(stat="identity", color="black", position=position_dodge()) +
              theme_minimal()+xlab(names(D.1)[which(names(D.1)==response.1)])+labs(fill=names(D.1)[which(names(D.1)==CAT)])+
              theme(text = element_text(size = 15))
          })
          
          # 使用 grid.arrange 函數來顯示每個 ggplot 圖形
          grid.arrange(grobs = P)
        }}
      }else{
        D.1<-as.data.frame(data())
        response.1<-input$columns_res
        if(length(response.1)==0){"No"}else{
          Cate.1<-input$columns_cat
          if(length(response.1)>1){print("Please choose one")}else{
            # 使用 ggplot2: Boxplot
            P <- lapply(Cate.1, function(CAT){
              D.plty1<-data.frame(res=D.1[,names(D.1)==response.1],group.1=D.1[,names(D.1)==CAT])
              #Plot
              ggplot(D.plty1, aes(y=res, x=factor(group.1),color=factor(group.1))) +
                geom_boxplot()+geom_flat_violin(position = position_nudge(x = .2),
                                                trim = TRUE, alpha = 0.7, scale = "width")+
                geom_point(aes(color = factor(group.1)),position = position_jitter(w = .15))+
                xlab(names(D.1)[which(names(D.1)==CAT)])+theme(text = element_text(size = 15))+
                ylab(names(D.1)[which(names(D.1)==response.1)])+guides(color = "none")
            })
            
            # 使用 grid.arrange 函數來顯示每個 ggplot 圖形
            grid.arrange(grobs = P)
          }
        }}
      
    })
    
    #Continuous variable: Box plot
    output$Con_plot<-renderPlot({
      if(input$columns_res_Type==1){
      D.1<-as.data.frame(data())
      response.1<-input$columns_res
      if(length(response.1)==0){"No"}else{
        Cont.1<-input$columns_con
        if(length(response.1)>1){print("Please chose one")}else{
          P<-lapply(Cont.1, function(CONT){
            D.plty1<-data.frame(res=D.1[,names(D.1)==CONT],group.1=D.1[,names(D.1)==response.1])
            #Plot
            ggplot(D.plty1, aes(y=res, x=factor(group.1),color=factor(group.1))) +
              geom_boxplot()+geom_flat_violin(position = position_nudge(x = .2),
                                              trim = TRUE, alpha = 0.7, scale = "width")+
              geom_point(aes(color = factor(group.1)),position = position_jitter(w = .15))+
              xlab(names(D.1)[which(names(D.1)==response.1)])+theme(text = element_text(size = 15))+
              ylab(names(D.1)[which(names(D.1)==CONT)])+guides(color = "none")
            #labs(color=names(D.1)[which(names(D.1)==CONT)])+
            # 使用grid.arrange 函數來顯示每個 ggplot 圖形
          })
          grid.arrange(grobs = P)
        }
      }
      }else{
        D.1<-as.data.frame(data())
        response.1<-input$columns_res
        if(length(response.1)==0){"No"}else{
          Cont.1<-input$columns_con
          if(length(response.1)>1){print("Please chose one")}else{
            P<-lapply(Cont.1, function(CONT){
              D.plty1<-data.frame(res=D.1[,names(D.1)==response.1],group.1=D.1[,names(D.1)==CONT])
              #Plot
              ggplot(D.plty1, aes(y=res,x=group.1))+
                geom_point()+geom_smooth(method=lm)+
                xlab(names(D.1)[which(names(D.1)==CONT)])+theme(text = element_text(size = 15))+
                ylab(names(D.1)[which(names(D.1)==response.1)])
              #+guides(color = "none")+labs(color=names(D.1)[which(names(D.1)==CONT)])+
              # 使用grid.arrange 函數來顯示每個 ggplot 圖形
            })
            grid.arrange(grobs = P)
          }}
      }
    })
    
  })
  
  # 下載按鈕
  output$download_summary <- downloadHandler(
    filename = function() {
      paste("summary", ".csv", sep="")
    },
    content = function(file) {
      write.csv(result_summary1(), file, row.names = TRUE)
    }
  )
  
}

# 啟動應用程序
shinyApp(ui = ui, server = server)

