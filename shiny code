library(shiny)
library(readr)

# 定義 UI 部分
ui <- fluidPage(
  titlePanel("CSV 檔案敘述統計與圖表"),
  
  sidebarLayout(
    sidebarPanel(
      fileInput("file", "選擇 CSV 檔案", accept = ".csv"),
      selectizeInput("columns_cat", "選擇要顯示的類別變數", choices = NULL, multiple = TRUE),
      selectizeInput("columns_con", "選擇要顯示的連續變數", choices = NULL, multiple = TRUE),
      selectizeInput("columns_res", "選擇要顯示作為依變數的列(如沒有就空著)", choices = NULL, multiple = TRUE),
      br(),
      radioButtons("testing.cont", label = "連續變數相等性假設檢定",
                   choices = list("Mann-Whiteney U test" = 1, "Two-sample t test" = 2), selected = 1),
      radioButtons("testing.cate", label = "離散變數相等性假設檢定",
                   choices = list("Chi-square test" = 1, "Fisher's exact test" = 2), selected = 1),
      br(),
      actionButton("show_summary", "顯示敘述統計"),
      progressBar(id = "pb4", value = 0,display_pct = T),
      br(),
      br(),
      downloadButton("download_summary", "下載敘述統計結果")
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("敘述統計", verbatimTextOutput("summary")),
        tabPanel("遺失值個數(比例)", verbatimTextOutput("Missing.V"))
      )
    )
  )
)

# 定義 server 部分
server <- function(input, output, session) {
  # 定義一個 reactiveVal 來保存結果
  result_summary1 <- reactiveVal(NULL)
  
  data <- reactive({
    req(input$file)
    read_csv(input$file$datapath)
  })
  
  observe({
    if (!is.null(data())) {
      updateSelectizeInput(session, "columns_cat", choices = colnames(data()))
      updateSelectizeInput(session, "columns_con", choices = colnames(data()))
      updateSelectizeInput(session, "columns_res", choices = colnames(data()))
    }
  })
  
  observeEvent(input$show_summary, {
    #req(input$columns)
    maxi <- 50
    for (i in 1:maxi) {
      updateProgressBar(session = session, id = "pb4", value = (i/maxi)*100)
      Sys.sleep(0.1)
    }
    #
    output$Missing.V<-renderPrint({
      M.1<-rbind(round(colMeans(is.na(data()))*100,2),colMeans(is.na(data()))*dim(data())[1])
      rownames(M.1)<-c("比例(%)","個數")
      print(M.1)
    })
    #
    output$summary <- renderPrint({
      if(is.null(input$columns_res)){
        result <- lapply(c(input$columns_cat,input$columns_con), function(col){
          summary(data()[[col]])
        })
        do.call("rbind", result)
      }else{
        D.1<-as.data.frame(data())
        response.1<-input$columns_res
        if(length(response.1)>1){print("Please chose one")}else{
        Class.1<-names(table(data()[[response.1]]))
        Con.1<-input$columns_con
        Cate.1<-input$columns_cat
        if(length(Class.1)!=2){"Coming soon"}else{
        #Continous
        Descriptive.Cont<-c()
        for(k.1 in Con.1){
          Descriptive.con<-c()
          for(i in 1:length(Class.1)){
            result.2.Mean <- mean(D.1[which(D.1[,response.1]==Class.1[i]),which(names(D.1)==k.1)],na.rm = T)
            result.2.SD <- sqrt(var(D.1[which(D.1[,response.1]==Class.1[i]),which(names(D.1)==k.1)],na.rm = T))
            Descriptive.con<-c(Descriptive.con,paste0(round(result.2.Mean,2),"(",round(result.2.SD,2),")"))
          }
          # testing
          if(input$testing.cont==1){
          MW<-wilcox.test(D.1[which(D.1[,response.1]==Class.1[1]),which(names(D.1)==k.1)],
                          D.1[which(D.1[,response.1]==Class.1[2]),which(names(D.1)==k.1)],exact = F)
          Descriptive.con<-c(Descriptive.con,round(MW$p.value,2))
          }else{
            Two.t<-t.test(D.1[which(D.1[,response.1]==Class.1[1]),which(names(D.1)==k.1)],D.1[which(D.1[,response.1]==Class.1[2]),which(names(D.1)==k.1)])
            Descriptive.con<-c(Descriptive.con,round(Two.t$p.value,2))
          }
          #Descriptive.con<-c(Descriptive.con,round(MW$p.value,2))
          Descriptive.Cont<-rbind(Descriptive.Cont,Descriptive.con)
        }
        rownames(Descriptive.Cont)<-Con.1
        #Cate
        Descriptive.Cate<-c()
        for(k.2 in Cate.1){
          
          VV<-paste0(k.2,".",names(table(D.1[which(is.na(D.1[,k.2])==F),which(names(D.1)==k.2)]))) 
          result.2.table <- table(D.1[which(is.na(D.1[,k.2])==F),which(names(D.1)==k.2)],D.1[which(is.na(D.1[,k.2])==F),which(names(D.1)==response.1)])
          result.2.table.row<-prop.table(result.2.table, margin = 1)
          result.3<-matrix(paste0(result.2.table,"(",round(result.2.table.row*100,2),"%",")"),nrow = dim(result.2.table)[1],ncol = dim(result.2.table)[2])
          testing.col<-matrix(NA,ncol=1,nrow=dim(result.2.table)[1])
          # testing
          if(input$testing.cate==1){
          Chi.Val<-chisq.test(result.2.table)
          testing.col[1,]<-round(Chi.Val$p.value,2)
          }else{
            Fisher.exact<-fisher.test(result.2.table)
            testing.col[1,]<-round(Fisher.exact$p.value,2)
          }
          result.3<-cbind(result.3,testing.col)
          rownames(result.3)<-VV
          Descriptive.Cate<-rbind(Descriptive.Cate,result.3)
        }
        result.summary<-rbind(Descriptive.Cont,Descriptive.Cate)
        RR<-paste0(response.1,".",names(table(D.1[,which(names(D.1)==response.1)]))) 
        colnames(result.summary)<-c(RR,"P value")
        
        result_summary1(result.summary)
        print(result.summary)
        }
        }
      }
      
    })
    
  })
  
  # 下載按鈕
  output$download_summary <- downloadHandler(
    filename = function() {
      paste("summary", ".csv", sep="")
    },
    content = function(file) {
      write.csv(result_summary1(), file, row.names = TRUE)
    }
  )
  
}

# 啟動應用程序
shinyApp(ui = ui, server = server)  
